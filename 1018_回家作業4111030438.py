# -*- coding: utf-8 -*-
"""1018_回家作業.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m9teLwuF18kx7lWpyp-Sf61vHF69ME5v

Ｑ：模擬圖書館的書籍管理系統，讓使用者可藉由輸入書本名稱＆作者查找書籍

程式應包含以下操作：


1.   允許用戶可選擇四項功能：列印所有書籍、添加書籍、查詢書籍、結束。
2.   創建一個空的書籍列表，每本書籍包含書名、作者和出版年份等資訊。
1.   使用迭代器列印所有書籍的資訊。
2.   使用 itertools 模組中的函式將書籍列表按書名或作者名進行分組。
1.   允許用戶查詢特定書籍的資訊，讓使用者可藉由輸入書本名稱＆作者查找書籍。

## **請勿刪除註解及修改配分**
# 請依據提示完成程式碼，勿修改變數名稱
"""

# 請import需要使用的相關套件(10%)
import re
from itertools import groupby

def main():
    # 創建新的書籍列表，每本書籍包含書名、作者和出版年份等資訊(5%)
    
    library = []

    while True:
        print("選項：")
        print("1. 列印所有書籍")
        print("2. 添加新書籍")
        print("3. 查詢書籍")
        print("4. 結束")
        option = input("輸入選項： ")

        if option == '1':
            print("\n所有書籍資訊：")
            # 使用 itertools 模組中的分組函式，讓使用者可以選擇將書籍列表按書名或作者名印出(40%)
            sort_option = input("按書名(a)或作者名(b)印出： ")
            if sort_option == 'a':
                #用sort方法對library列表中的書籍進行排序,lambda函式，將每本書籍的書名提取出來，然後依據書名排序
                library.sort(key=lambda book: book.split(",")[0])
                #將資料存在grouped_library的字典裡,鍵為書名,值為分類的書名排序
                grouped_library = {key: list(group) for key, group in groupby(library, lambda book: book.split(",")[0])}
            elif sort_option == 'b':
                #用sort方法對library列表中的書籍進行排序,lambda函式，將每本書籍的作者名提取出來，然後依據作者名排序
                library.sort(key=lambda book: book.split(",")[1])
                grouped_library = {key: list(group) for key, group in groupby(library, lambda book: book.split(",")[1])}
                #將資料存在grouped_library的字典裡,鍵為作者名,值為分類的作者名排序
            else:
                print("輸入無效的選項")
                continue
            
            for key, books in grouped_library.items():
                if sort_option == "a":
                    print(f"分組: 書名:{key}")
                if sort_option == "b":
                    print(f"分組: 書名:{key}")
                for book in books:
                    print(book)

        elif option == '2':
            book_title = input("輸入書名： ")
            book_author = input("輸入作者： ")
            book_year = input("輸入出版年份： ")

            # 使用re模組檢查書名和作者只能包含字母和空格(10%)
            if not re.match("^[a-zA-Z\s]+$", book_title) or not re.match("^[a-zA-Z\s]+$", book_author):
                print("僅能輸入字母和空格,書籍添加失敗\n")
                continue

            book_info = f"書名: {book_title}, 作者: {book_author}, 出版年份: {book_year}"
            library.append(book_info)
            print("書籍已添加。\n")

        elif option == '3':
            search_title = input("輸入要查詢的書名： ")
            search_author = input("輸入要查詢的作者： ")

            # 使用re模組檢查書名和作者只能包含字母和空格(10%)
            if not re.match("^[a-zA-Z\s]+$", search_title) or not re.match("^[a-zA-Z\s]+$", search_author):
                print("僅能輸入字母和空格,書籍查詢失敗\n")
                continue

            # 將找到的書籍用list綜合表達式呈現，請完成[]中的程式碼(15%)
            found_books = [book for book in library if search_title in book and search_author in book]

            if found_books:
                print("\n查詢結果：")
                # 使用for迴圈，將找到的書籍印出來(10%)
                for book in found_books:
                    index = library.index(book)
                    print(f"索引: {index}, {book}")
            else:
                print("未找到符合條件的書籍。\n")

        elif option == '4':
            break
        else:
            print("無效選項。請重新輸入。\n")

if __name__ == "__main__":
    main()